import { Batch, ContentStateResponse, Course, CourseBatchDetailsRequest, CourseBatchesRequest, CourseService, CourseServiceConfig, EnrollCourseRequest, FetchEnrolledCourseRequest, GetContentStateRequest, UpdateContentStateRequest } from '..';
import { Observable } from 'rxjs';
import { ProfileService } from '../../profile';
import { KeyValueStore } from '../../key-value-store';
import { ApiService } from '../../api';
import { UnenrollCourseRequest } from '../def/unenrollCourseRequest';
import { DbService } from '../../db';
import { SharedPreferences } from '../../util/shared-preferences';
import { ContentService } from '../../content';
export declare class CourseServiceImpl implements CourseService {
    private courseServiceConfig;
    private apiService;
    private profileService;
    private keyValueStore;
    private dbService;
    private sharedPreferences;
    private contentService;
    static readonly GET_CONTENT_STATE_KEY_PREFIX: string;
    static readonly GET_ENROLLED_COURSE_KEY_PREFIX: string;
    static readonly UPDATE_CONTENT_STATE_KEY_PREFIX: string;
    static readonly LAST_READ_CONTENTID_PREFIX: string;
    constructor(courseServiceConfig: CourseServiceConfig, apiService: ApiService, profileService: ProfileService, keyValueStore: KeyValueStore, dbService: DbService, sharedPreferences: SharedPreferences, contentService: ContentService);
    getBatchDetails(request: CourseBatchDetailsRequest): Observable<Batch>;
    updateContentState(request: UpdateContentStateRequest): Observable<boolean>;
    getCourseBatches(request: CourseBatchesRequest): Observable<Batch[]>;
    getEnrolledCourses(request: FetchEnrolledCourseRequest): Observable<Course[]>;
    enrollCourse(request: EnrollCourseRequest): Observable<boolean>;
    getContentState(request: GetContentStateRequest): Observable<ContentStateResponse | undefined>;
    unenrollCourse(unenrollCourseRequest: UnenrollCourseRequest): Observable<boolean>;
    checkContentStatus(request: GetContentStateRequest): Observable<number>;
}
