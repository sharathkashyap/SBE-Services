import { AcceptTermsConditionRequest, ContentAccess, GenerateOtpRequest, GetAllProfileRequest, IsProfileAlreadyInUseRequest, LocationSearchCriteria, Profile, ProfileExportRequest, ProfileExportResponse, ProfileService, ProfileServiceConfig, ProfileSession, ProfileSource, ServerProfile, ServerProfileDetailsRequest, ServerProfileSearchCriteria, UpdateServerProfileInfoRequest, VerifyOtpRequest } from '..';
import { DbService } from '../../db';
import { Observable } from 'rxjs';
import { TenantInfo } from '../def/tenant-info';
import { ApiService } from '../../api';
import { CachedItemStore, KeyValueStore } from '../../key-value-store';
import { ContentAccessFilterCriteria } from '../def/content-access-filter-criteria';
import { ProfileExistsResponse } from '../def/profile-exists-response';
import { LocationSearchResult } from '../def/location-search-result';
import { SharedPreferences } from '../../util/shared-preferences';
import { FrameworkService } from '../../framework';
import { ProfileImportRequest } from '../def/profile-import-request';
import { ProfileImportResponse } from '../def/profile-import-response';
import { FileService } from '../../util/file/def/file-service';
import { DeviceInfo } from '../../util/device';
import { TelemetryService } from '../../telemetry';
export declare class ProfileServiceImpl implements ProfileService {
    private profileServiceConfig;
    private dbService;
    private apiService;
    private cachedItemStore;
    private keyValueStore;
    private sharedPreferences;
    private frameworkService;
    private fileService;
    private deviceInfo;
    private static readonly KEY_USER_SESSION;
    private telemetryService;
    constructor(profileServiceConfig: ProfileServiceConfig, dbService: DbService, apiService: ApiService, cachedItemStore: CachedItemStore<ServerProfile>, keyValueStore: KeyValueStore, sharedPreferences: SharedPreferences, frameworkService: FrameworkService, fileService: FileService, deviceInfo: DeviceInfo);
    registerTelemetryService(telemetryService: TelemetryService): void;
    preInit(): Observable<undefined>;
    createProfile(profile: Profile, profileSource?: ProfileSource): Observable<Profile>;
    deleteProfile(uid: string): Observable<undefined>;
    updateProfile(profile: Profile): Observable<Profile>;
    updateServerProfile(updateUserInfoRequest: UpdateServerProfileInfoRequest): Observable<Profile>;
    getServerProfiles(searchCriteria: ServerProfileSearchCriteria): Observable<ServerProfile[]>;
    getTenantInfo(): Observable<TenantInfo>;
    getAllProfiles(profileRequest?: GetAllProfileRequest): Observable<Profile[]>;
    getServerProfilesDetails(serverProfileDetailsRequest: ServerProfileDetailsRequest): Observable<ServerProfile>;
    getActiveSessionProfile({ requiredFields }: Pick<ServerProfileDetailsRequest, 'requiredFields'>): Observable<Profile>;
    setActiveSessionForProfile(profileUid: string): Observable<boolean>;
    getActiveProfileSession(): Observable<ProfileSession>;
    acceptTermsAndConditions(acceptTermsConditions: AcceptTermsConditionRequest): Observable<boolean>;
    isProfileAlreadyInUse(isProfileAlreadyInUseRequest: IsProfileAlreadyInUseRequest): Observable<ProfileExistsResponse>;
    generateOTP(generateOtpRequest: GenerateOtpRequest): Observable<boolean>;
    verifyOTP(verifyOTPRequest: VerifyOtpRequest): Observable<boolean>;
    searchLocation(locationSearchCriteria: LocationSearchCriteria): Observable<LocationSearchResult[]>;
    getAllContentAccess(criteria: ContentAccessFilterCriteria): Observable<ContentAccess[]>;
    addContentAccess(contentAccess: ContentAccess): Observable<boolean>;
    exportProfile(profileExportRequest: ProfileExportRequest): Observable<ProfileExportResponse>;
    importProfile(profileImportRequest: ProfileImportRequest): Observable<ProfileImportResponse>;
    private mapDbProfileEntriesToProfiles;
    private generateSessionStartTelemetry;
    private generateSessionEndTelemetry;
}
